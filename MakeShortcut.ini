@rem = '--*-Ruby-*--
@goto BATCH_BEGIN
[option]
arg = -x -- "${MY_ININAME}"${ARG}
use_path
[exec]
ruby
[end]
:BATCH_BEGIN
@if %~d0 == ~d0 goto OLD_CMD
@ruby -x -- "%~f0" %*
@goto BATCH_END
:OLD_CMD
@echo Cannot determine script path. Run script directly.
@goto BATCH_END
--------------------------------------------------------
#! /usr/bin/ruby -Ks

# ショートカットを作成する
#
# 2009/06/17 by opa

require 'optparse'
require 'win32ole'

ProgName = 'MakeShortcut'
Version = '0.01'

def var_init()
	$shell = WIN32OLE.new('WScript.Shell')

	$Arguments = nil
	$Description = nil
	$HotKey = nil
	$IconLocation = nil
	$TargetPath = nil
	$WindowStyle = nil
	$WorkingDirectory = nil
end

def make_shortcut(filename)
	if $TargetPath == nil
		printf("%s: TargetPath(-t) not presented\n", ProgName)
		return
	end

# TODO: *.lnk か*.url であること

	shortcut = $shell.CreateShortcut(filename)
	modified = false

	if $Arguments != nil
		if shortcut.Arguments != $Arguments
			shortcut.Arguments = $Arguments
			modified = true
		end
	end

	if $Description != nil
		if shortcut.Description != $Description
			shortcut.Description = $Description
			modified = true
		end
	end

	if $HotKey != nil
		if $HotKey.casecmp(shortcut.HotKey) != 0
			begin
				shortcut.HotKey = $HotKey
				modified = true
			rescue
				printf($stderr, "error\n")
			end
		end
	end

# TODO:フルパス化する
	if $IconLocation != nil
		if $IconLocation.casecmp(shortcut.IconLocation) != 0
			shortcut.IconLocation = $IconLocation
			modified = true
		end
	end

# TODO:フルパス化する
	if $TargetPath != nil
		if $TargetPath.casecmp(shortcut.TargetPath) != 0
			shortcut.TargetPath = $TargetPath
			modified = true
		end
	end

# TODO: 最小化→7 通常→1 最大化→3
	if $WindowStyle != nil
		if shortcut.WindowStyle != $WindowStyle
			shortcut.WindowStyle = $WindowStyle
			modified = true
		end
	end

	if $WorkingDirectory != nil
		if $WorkingDirectory.casecmp(shortcut.WorkingDirectory) != 0
			shortcut.WorkingDirectory = $WorkingDirectory
			modified = true
		end
	end

	if modified
		shortcut.save
	end
end

class String
	def enc()
		encode('UTF-8').force_encoding('ASCII-8BIT')
	end

	def dec()
		force_encoding('UTF-8').encode('locale')
	end
end

def main()
	var_init()

	ARGV.size.times { |i|
		ARGV[i] = ARGV[i].enc()
	}

	ARGV.options { |opt|
		opt.banner = "Usage: #{ProgName} [options] file..."

# TODO:update ではなく create するための方法
		opt.on('-a', '--Arguments=arg',		String,	'パラメータ') { |v|
			$Arguments = v.dec()
		}
		opt.on('-d', '--Description=text',	String,	'コメント') { |v|
			$Description = v.dec()
		}
		opt.on('-h', '--HotKey=key',		String,	/(\w|\+)+/,	'ショートカットキー') { |v|
			$HotKey = v[0].dec()
		}
		opt.on('-i', '--IconLocation=filename',	String,	'アイコン') { |v|
			$IconLocation = v.dec()
		}
		opt.on('-t', '--TargetPath=filename',	String,	'リンク先') { |v|
			$TargetPath = v.dec()
		}
		opt.on('-s', '--WindowStyle=style',	String,	/Normal|Maximize|Minimize/i,	'実行時の大きさ') { |v|
			$WindowStyle = v.dec()
		}
		opt.on('-w', '--WorkingDirectory=dir',	String,	'作業フォルダ') { |v|
			$WorkingDirectory = v.dec()
		}

		opt.parse!
	}

	ARGV.each { |a| make_shortcut(a.dec()) }

	return 0
end

exit main()

__END__
:BATCH_END
